Bound: Somatorio de max(0, out - in) pra cada vertice, pro DAG com todos os caminhos isso é exato, se não é só um bound

Bound: Euler com mais coisa (max((out + in) / 2) pra quando soma de max(0, out - in) de uma componente é 0?)

Talvez pensar na variante do problema em que nem sempre tem solucao

Enhance the packing bounds

Possibly use some kind of hot starting because we do DFS
    This seems very doable

Interleaved DFS
Randomization, Restart strategies, start the interleaf when finding a tie in the greatest degree
BFS with diving (temos restricoes de memoria, talvez contornar se voltassemos poucas vezes)
Interleaved seems more doable tho

Try to think of some kind of Arc Consistency or Nogood recording
Primeiro modelar nosso problema como um CSP (busca binaria ?) (relacao com o upper bound ?)
    Cada caminho é uma variavel binaria
    Restricoes: Soma das variaveis binarias <= UB
    Soma dos caminhos que passam por cada aresta >= 1
Ver se conseguimos calcular consistencia de arco para um unico constraint (besta)
Forward Checking: Uma aresta só tem um unico caminho nao definido (Unit Edge Rule) Ja fazemos

Que tal fazer branching sobre o caminho que esta na aresta de menor grau ?
Ver se conseguimos definir o que torna uma solucao inconsistente de forma efetiva (nogood, n tentei pensar ainda)

Busca heuristica no comeco do B&B para ja comecar com uma solução incumbente decente (só no começo)

Melhorar o Sum of Degrees Bound usando um preprocessamento n^2 (Tipo um inclusao exclusao incompleto) ou ate n^3
    Escolhi os caminhos A1, A2, A3, A4, A5, posso subtrair as arestas que estao nos pares (A1, A2), (A2, A3), (A3, A4), (A4, A5)
    Com a garantia de contar cada aresta pelo menos uma vez
    Isso da ruim pois pode ser que Ax seja maior que A2 - (A1, A2) por exemplo
    N rola bruh

Pensar no solver exatos para classes de grafos podendo repetir aresta

Max Weighted Cut pra DAG

Independent strategies

Diferentes Branchings

DSU
    Binario, escolher um par que tem uma quantidade parecida de vertices que soh cobrem um e vertices que cobrem os dois
    Precalcular isso soh no comeco
    Talvez usar esse branching apenas no comeco (tipo fazer esse branching c vezes) pq dps de um tempo deve ficar desequilibrado
    Ou fazer esse branching enquanto continuar relativamente equilibrado e dps passar para uma outra estrategia
    Nao precisa de DSU, soh vamos fixar alguns vertices fora da resposta
    Precisamos codar a versao exata tho

Wide (escolher qual caminho passa por uma aresta) (Problema: Overcounting) (prohibited)
    Codamos e o prohibited conserta o problema de Overcounting
    Implementamos um preprocessamento para a ordem dos vertices
    Em instancias com muita aresta e pouco vertice ele apanha bastante

Costly Inclusion

Pensar nas alteracoes para o solver exato

Lower Bounds - Normal
Upper Bound - 
Unit Edge Rule - Depende se vamos permitir que o problema nao tenha solucao
Edge Domination Rule - Nao podemos pegar os vertices fora da intersecao (depende se vamos permitir...)
Vertex Domination Rule - Deixa de fazer sentido

Operacao de colocar um vertice na resposta agora eh bem custosa (tem que bloquear todos os vertices que tem intersecao com ele)
Branching depende muito do tipo da instancia né (caminhos longos ou nao) (talvez trabalhar no k-PSEC com k pequeno)
Acho que temos que definir uma classe especifica de instancias para trabalhar, pq tudo fica mt no depende

https://garethrees.org/2007/06/10/zendoku-generation/#section-4.2
Qd possivel, fazer o branching em cima de pontes
Se nao, fazer o branching em cima de vertices de grau baixo para criar pontes (como saber grau de vertice? soh manter um vetor global)
Tentar fazer um divide and conquer e achar um corte de tamanho pequeno que divide o grafo mais ou menos pela metade

Erdos renyi
Preferential Attachment

Particao
Nao direcionado
Nao gerar tudo inviavel
Nao gerar muito facil tbm
Criar uma solucao viavel e dai gerar os caminhos
Achar se o problema eh viavel eh np dificil ? (Prove)
Path partition

Graph decomposition is NPC - a complete proof of Holyer's conjecture
The NP-Completeness of Some Edge-Partition Problems - nao consegui acessar

Soh determinar se eh viavel ja eh np dificil por causa do paper do Graph Decomposition is NPC

Instancias:
3DMR
    Bloco de tamanho 7
    Juntar blocos separados
    Juntar de 3 em 3 (random ou nao) OK
Transformar instancias do 3dmr em PCEC OK Instancias geradas e eh deboas
Erdos Renyi (esparsos e densos) OK 
Preferential Attachment OK
Redes reais (Pegar dps que eu tiver uma ideia do tamanho)
Arvore random e dai adicionar arestas random OK

Grafos:
Erdos Renyi densos OK
Erdos Renyi esparsos OK
Preferential Attachment OK
Arvores random adicionando arestas OK
Redes reais

Caminhos:
Comecar em uma aresta e ir expandindo random
Todos os caminhos de tamanho 3

Existe uma instancia dificil do 3DMR OK
    Fazer 000, 111, 222... e depois juntar em pares para que tenha soh uma resposta possivel
    0 e 1 aparecem sempre em pares e o 2 sempre sozinho
    Com isso conseguimos fazer instancias dificeis grandes com n multiplo de 3
    Isso garante que a instancia eh dificil

xor bitset

detectar inviabilidade
    grafo de implicacoes (2SAT da vida)
    nogood - pegar uma possicao impossivel e dai ver quais arestas nao estao cobertas
    o conjunto de selecao de variaveis dos caminhos que passam por aquela aresta eh um nogood
    pegar as arestas nao cobertas e ver quais caminhos bloqueiam os caminhos que passam por aquela aresta

Como usar o nogood ? 
    Se na intersecao do nogood tiver alguma aresta sabemos que todos os caminhos que passam por aquela aresta devem ser apagados
    Guardar na memoria para uso futuro?
    Fazer o jumpback na recursao

Arc Consistency 
    Quero conseguir cobrir 2 caras que nao estao em nenhum caminho juntos mas estao pertos
    ou x caras
    soh mantenho os caminhos que participam de alguma solucao

upper bound fica mt dificil de fazer

simetria de grupos de caminhos ({1, 2}, {3, 4, 5}) e ({1, 2, 3}, {4, 5}) (hashing?)

heuristicas de problemas em que a inviabilidade eh dificil - pessoal faz busca local ou usa alguma meta heuristica no meio do BB

GRASP e Simulated Annealing

Rounding com PL - nao achei mt coisa

VNS VND RVND VLNS

NAO usei o scihub pra ver que o artigo era aquilo mesmo do P3

Como ler o gurobipy

Fiz as instancias usando o gurobi pra ver quais tamanhos eram bons e agora ta bem codado ent eh facil fazer mais

Fiz o construtivo mas ele n parece ser mt dificil kkkkkkkkkk

Gurobi deixar single thread

Cplex

generalizar mais o nogood pensar em duplas ou trios

m - #edges + 1?

options are the paths
items are the edges

Algoritmo: Manter pra cada vertice uma lista ligada e um vetor que fala pra cada aresta onde ela ta nos vertices e onde ela ta no dancing links
Manter pra cada componente um representante
Comecamos o bb no grafo todo, ai fazemos uma dfs que passa pelas arestas da componente e escolhemos qual aresta cobrir
Agora se nao tivermos percorrido todos os vertices a gnt pega o ultimo caminho escolhido e ve quais vertices nao foram marcados, fazendo dfs neles

Seria legal para a proxima semana terminar de uma vez por todas as instancias
Organizar um novo repositorio no github com testes automatizados
Testar a versao inicial contra gurobi e contra o dancing links puro

Dancing Links pros vertices tbm!! (soq invertido)
Iterar pelo caminho escolhido para achar as novas componentes
Nessa primeira versao nao vamos implementar nenhuma heuristica nem bound
O solver vai soh iterar por todas as solucoes para todos os representantes e retornar a melhor combinacao


int search(int rep):
// devolve o melhor resultado para a componente de rep
// devolve tudo devidamente rollbackeado
    se nao tem mais nenhuma aresta pra ser coberta:
        return 0

    ans = 0
    dfs no representante e escolhe a aresta com menos caminhos passando por ela
    cobre essa aresta
    lembrando que cobrir uma aresta tambem implica esconder ela da table2
    pra cada caminho que passa por essa aresta:
        cobre todas as arestas do caminho
        para cada cara nrep nao visitado (dentre os do caminho escolhido):
            tenta = min(search(nrep), INF)
            ans = min(ans + tenta, INF) 
            faz uma dfs em nrep marcando os visitados
        reseta os visitados
        descobre todas as arestas do caminho
    descobre a aresta escolhida
    return ans

Otimizacoes:
    Fazer o search nas componentes por ordem de tamanho
    Manter os bounds pra cada componente (como fazer isso ?)
    Talvez manter o upperbound global e calcular de todas as componentes com uma stack ao inves de recursao
    Problema: Nosso algoritmo eh rapido, mas ele acha todas as respostas e a gnt n quer isso

Ideia: Tem um overcounting baseado no conjunto de arestas, podemos fazer um hashing para checar se ja chegamos em cada posicao
Nao sei como retornar dai 

Pode ter mais de uma componente no comeco, temos que ver isso

Por algum motivo o main.cpp ta errado e o new.cpp nao???????????????????????????????????????????????????
        